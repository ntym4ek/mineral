<?php

const ADMIN_RID = 3;

function ext_user_preprocess_page(&$vars)
{
  if (arg(0) == 'user' && $GLOBALS['theme'] != 'seven') {
    $vars['title'] = $banner_uri = '';

    $vars['is_banner_on'] = true;
    $banner_uri = 'public://images/page-banners/user.jpg';
    $vars['banner_title'] = t('User account');

    if ($banner_uri) {
      $vars['is_banner_on'] = true;
      $vars['banner_url'] = file_create_url($banner_uri);
      $vars['banner_mobile_url'] = image_style_url('banner_mobile', $banner_uri);
    }

    // убрать закладки, кроме случая, когда редактор смотрит профиль другого пользователя
    if ((!user_has_role(ADMIN_RID))
      || ext_user_user_own_account()
      || !is_numeric(arg(1)))
    {
      unset($vars['tabs']);
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function ext_user_user_insert( &$edit, &$account, $category = NULL )
{
  // при регистрации нового пользователя установить уникальное имя: Пользователь #uid
  $new_name = t('User ') . $account->uid;

  db_update('users')
    ->fields(array('name' => $new_name))
    ->condition('uid', $account->uid)
    ->execute();

  $edit['name'] = $new_name;
  $account->name = $new_name;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_pass_alter(&$form, &$form_state)
{
  if (!user_has_role(ADMIN_RID)) {
    $form['#prefix'] =  '<div class="user-auth-form-wrapper">';
    $form['#prefix'] .=   '<h1>' . t('Password recovery') . '</h1>';
    $form['#prefix'] .=   user_is_logged_in() ? '<div class="user-links">&nbsp;</div>' : '<div class="user-links"><a href="' . url('user/login') . '">' . t('Log in') . '</a> ' . t('or') . ' <a href="' . url('user/register') . '">' . t('Register') . '</a></div>';
    $form['#suffix'] =  '</div>';
    // если пользователь авторизован, то пароль будет выслан на текущий email
    $form['name']['#title'] = t('E-Mail');
    $form["mail"]["#markup"] = t('The recovery link will be sent to E-Mail above.');
    if (user_is_logged_in()) {
      $form["name"]["#type"] = 'textfield';
      $form["name"]["#disabled"] = true;
      $form["mail"]["#markup"] .= '<p>' . t('If you want to recover another email, you need to <a href="' . url('user/logout') . '">Log out</a>.') . '</p>';
    }
    // если нет, то сменить текст подсказки
    else {
      $form["name"]["#default_value"] = $_GET['email'] ?? '';
    }
    $form["actions"]["submit"]['#value'] = t('Submit');
    $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-full-wide'];

    array_unshift($form['#submit'], 'ext_user_user_pass_submit');
  }
}

function ext_user_user_pass_submit($form, $form_state)
{
  // перевести переменную с текстом сообщения при восстановлении пароля
  if (variable_get('user_password_reset_text')) {
    variable_set('user_password_reset_text', t(variable_get('user_password_reset_text')));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_login_alter(&$form, &$form_state)
{
  // обёртка для темизации формы
  $form['#prefix'] =  '<div class="user-auth-form-wrapper">';
  $form['#prefix'] .=   '<h1>' . t('Log in') . '</h1>';
  $form['#prefix'] .=   '<div class="user-links"><a href="' . url('user/register') . '">' . t('Register') . '</a> ' . t('or') . ' <a href="' . url('user/password') . '">' . t('Password recovery') . '</a></div>';
  $form['#suffix'] = '</div>';

  // изменить вид полей
  $form['name']['#title'] = t('E-Mail');
  unset($form['name']['#description']);
  $form["pass"]["#title"] = t('Password');
  unset($form['pass']['#description']);

  $form["actions"]["submit"]['#value'] = t('Submit');
  $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-full-wide'];

  // обработчики
  $form['name']['#element_validate'][] = 'ext_user_login_name_validate';
  // в валидаторе добавим ссылку на форму отправки письма для активации
  $form['#validate'][] = 'ext_user_form_user_login_validate';
}

/**
 * Аутентификауия по email и имени пользователя
 * Form element validation
 */
function ext_user_login_name_validate($form, &$form_state)
{
  $user = ext_user_user_load_by_login($form_state['values']['name']);
  if ($user->uid) {
    $form_state['values']['name'] = $user->name;
    return TRUE;
  }

  return FALSE;
}


/**
 * user_login_form validation callback
 */
function ext_user_form_user_login_validate($form, &$form_state)
{
  if (!empty($form_state['values']['name']) && user_is_blocked($form_state['values']['name'])) {
    $options = [];
    if (valid_email_address($form_state["input"]["name"])) {
      $options = ['query' => ['email' => $form_state["input"]["name"]]];
    }
    $_SESSION["messages"]["error"][] = t('Follow next <a href="@url">link</a> to resend activation e-mail.', ['@url' => url('user/resend-activation-email', $options)]);
  }

  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_register_form_alter(&$form, &$form_state)
{
  if ($GLOBALS['theme'] != 'seven') {
    // убрать необязательные поля
    $form['account']['name']['#type'] = 'hidden';
    $form['account']['name']['#value'] = 'ext_user_' . user_password();

    // изменить вид полей
    $form['account']['mail']['#title'] = 'E-Mail';
    unset($form['account']['mail']['#description']);
    $form['account']['pass']['#title'] = t('Password');
    $form['account']['pass']['#type'] = 'textfield';
    unset($form['account']['pass']['#description']);

    $form["profile_main"]["#type"] = 'container';

    // менять название кнопки нельзя, (user.admin.inc строка 27 привязана к дефолтному названию)
    //    $form["actions"]["submit"]['#value'] = t('Submit');
    $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-wide'];

    $form["account"]["notify"]["#access"] = false;
    $form["account"]["status"]["#access"] = false;
    $form["admin_language"]["admin_language"]["#default_value"] = 'default';
    $form["admin_language"]["#access"] = false;
    $form["locale"]["#access"] = false;

      // обёртка для темизации формы
      $form['#prefix'] = '<div class="user-auth-form-wrapper">';
      $form['#prefix'] .= '<h1>' . t('Register') . '</h1>';
      $form['#prefix'] .= '<div class="user-links"><a href="' . url('user/login') . '">' . t('Log in') . '</a> ' . t('or') . ' <a href="' . url('user/password') . '">' . t('Password recovery') . '</a></div>';
      $form['#suffix'] = '</div>';

      if (isset($form["fz152_agreement"])) $form["fz152_agreement"]["#weight"] = 10;
      $form["actions"]["#weight"] = 11;

    // обработчики
    $form['#validate'][] = 'ext_user_user_register_form_email_validate';
    $form['#submit'][] = 'ext_user_user_register_form_submit';
  }
}

/**
 * Проверка E-mail на спам при регистрации
 */
function ext_user_user_register_form_email_validate($form, &$form_state)
{
  // отсеять нежелательные (спамерские) email
  foreach(['!.*@.*\.us!s', '!.*@.*\.link!s', '!.*@.*\.co\.uk!s', '!.*@.*\.work!s', '!.*@.*\.website!s',
            '!.*@.*\.app!s', '!.*@.*\.ltd!s', '!.*@.*\.net!s', '!.*@.*\.online!s', '!.*@.*\.store!s', '!.*@.*\.info!s',
            '!.*@.*\.site!s', '!.*@.*\.gq!s', '!.*@.*\.network!s', '!.*@.*\.xyz!s', '!.*@.*\.cf!s', '!.*@.*\.club!s', '!.*@.*\.jokeray\.com!s', '!.*@.*\.dynainbox\.com!s'
            , '!.*@.*\.mailsmail\.ru!s', '!.*@.*\.mailyaha\.ru!s', '!.*@.*\.aolmail\.fun!s', '!.*@.*\.osakass\.!s'] as $pattern) {
    if (preg_match($pattern, $form_state['values']['mail'])) {
      form_set_error('mail', t('Registration unavailable.'));
    }
  }
}

function ext_user_user_register_form_submit($form, &$form_state)
{
  // на страницу авторизации после регистрации
  $form_state['redirect'] = 'user/login';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_profile_form_alter(&$form, &$form_state)
{
  if ($GLOBALS['theme'] != 'seven') {
    if ($form["#user_category"] == 'account') {
      // убрать поля
      $form["locale"]["#access"] = false;
      $form["mimemail"]["#access"] = false;
      $form["account"]["name"]["#access"] = false;

      // изменить вид полей
      $form['account']['mail']['#title'] = 'E-Mail';
      $form['account']['mail']['#disabled'] = true;
      unset($form['account']['mail']['#description']);
      $form["account"]["mail"]["#weight"] = -6;
      $form["actions"]["cancel"]["#value"] = t('Delete account');

      if (ext_user_user_own_account()) {
        // если это не форма восстановления, а форма смены пароля
        if ($form["account"]["current_pass"]["#access"]) {
          $form['account']['current_pass']['#prefix'] = '<div class="row"><div class="col-xs-12 col-md-6">';
          $form['account']['current_pass']['#suffix'] = '</div>';
          $form['account']['current_pass']['#title'] = t('Current password');
          $form["account"]["current_pass"]["#description"] = t('To change the password, you must enter the old password.');
          $form["account"]["current_pass"]["#type"] = 'textfield';
          $form["account"]["current_pass"]["#weight"] = -4;
          $form['account']['pass']['#prefix'] = '<div class="col-xs-12 col-md-6">';
          $form['account']['pass']['#suffix'] = '</div></div>';
        }
        $form['account']['pass']['#title'] = t('New password');
        $form['account']['pass']['#type'] = 'textfield';
        unset($form["account"]["pass"]["#description"]);

        // ссылка на Восстановление пароля для тех, кто не помнит
        $form["account"]["recovery"] = [
          '#markup' => '<p>' . t('If you do not remember old password, follow next <a href="@url">link</a> to set new.', ['@url' =>url('user/password')]) . '</p>',
        ];

        // не выводить статус
        $form["account"]["status"]["#access"] = false;
      } else {
        // не выводить смену пароля
        $form["account"]["current_pass"]["#access"] = false;
        $form["account"]["pass"]["#access"] = false;
      }
    }

    if ($form["#user_category"] == 'main') {
      $form["profile_main"]["field_user_photo"]["und"][0]["#description"] = '';
    }

    $form["#submit"][] = 'ext_user_form_user_profile_form_submit';
  }
}

function ext_user_form_user_profile_form_submit($form, &$form_state)
{
  $form_state['redirect'] = 'user';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ext_user_preprocess_menu_link(&$vars)
{
  if ($GLOBALS['theme'] != 'seven') {
    if ($vars["element"]["#href"] == 'user' && user_is_logged_in() && $vars["element"]["#original_link"]["depth"] == 1) {
      // сменить "Мой аккаунт" на иконку
      $vars["element"]["#title"] = '<i class="icon icon-109"></i>';
      $vars["element"]['#localized_options']['html'] = TRUE;
    }
  }
}

/**
 * Вернуть пользователя по указанному логину
 */
function ext_user_user_load_by_login($login)
{
  // Try loading by email.
  if ($user = user_load_by_mail($login)) {
    return $user;
  }

  // Try loading by username.
  if ($user = user_load_by_name($login)) {
    return $user;
  }
  return user_load(0);
}

/**
 * Вернуть массив с информацией о Пользователе
 */
function ext_user_get_user_info($user = null)
{
  if (empty($user)) $user = $GLOBALS['user']->uid;
  $key = $user->uid ?? $user;
  $result = &drupal_static(__FUNCTION__ . serialize($key));

  if (empty($result)) {
    $account = is_numeric($user) ? user_load($user) : $user;

    $surname = $name = $name2 = $email = $phone = '';
    $photo_uri = 'public://images/default/no_photo.png';
    $label = t('User');

    $result = [
      'id' => $account->uid,
      'status' => $account->status,
      'label' => $label,
      'email' => $email,
      'main' => [
        'surname' => $surname,
        'name' => $name,
        'name2' => $name2,
        'name_short' => $name . ' ' . $surname,
      ],
      'url' => url('user/' . $account->uid)
    ];
  }

  return $result;
}


/**
 * Привести номер телефона к стандартному виду: 7xxxxxxxxxx
 * @param $phone
 *
 * @return string
 */
function ext_user_normalize_phone($phone)
{
  // убираем всё лишнее кроме цифр
  $phone = preg_replace('/[^\d]/', '', trim($phone));
  // заменить первую 8 на 7
  $phone = preg_replace('/^8(\d+)/', '7$1', $phone);

  return $phone;
}

/**
 * Привести номер телефона к виду для вывода на сайте
 * @param $phone
 *
 * @return string
 */
function ext_user_format_phone($phone)
{
  // приведение к стандарту
  $phone = ext_user_normalize_phone($phone);
  // возможен телефон с добавочным кодом и 8332
  $phone = preg_replace('/^(\d)(8332)(\d\d)(\d\d)(\d\d)([\d]+)/', '+$1 ($2) $3-$4-$5 ' . t('ext.') . ' $6', trim($phone));
  $phone = preg_replace('/^(\d)(8332)(\d\d)(\d\d)(\d\d)/', '+$1 ($2) $3-$4-$5', trim($phone));

  // остальные форматируем - +7 xxx xxx-xx-xx
  $phone = preg_replace('/^(\d)(\d\d\d)(\d\d\d)(\d\d)(\d\d)/', '+$1 $2 $3-$4-$5', trim($phone));

  return $phone;
}

/**
 * Проверить, просматривает ли Пользователь свой аккаунт
 */
function ext_user_user_own_account()
{
  return !empty($GLOBALS['user']->uid) && $GLOBALS['user']->uid == arg(1);
}
